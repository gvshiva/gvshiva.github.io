{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/NgMaterialModule.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/header/header.component.ts","./src/app/components/header/header.component.html","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/components/note-edt-dialog/note-edt-dialog.component.ts","./src/app/components/note-edt-dialog/note-edt-dialog.component.html","./src/app/components/note-list-item/note-list-item.component.ts","./src/app/components/note-list-item/note-list-item.component.html","./src/app/components/note-list/note-list.component.ts","./src/app/components/note-list/note-list.component.html","./src/app/components/note-sort-dialog/note-sort-dialog.component.ts","./src/app/components/note-sort-dialog/note-sort-dialog.component.html","./src/app/components/notes/notes.component.ts","./src/app/components/notes/notes.component.html","./src/app/services/note.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {NgModule} from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { MatCardModule} from '@angular/material/card';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list'\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport { from } from 'rxjs';\n\n/**\n * Barrel module for Angular Material modules used by the app\n */\n@NgModule({\n  imports: [\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatListModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDialogModule,\n    MatSnackBarModule\n  ],\n  exports: [\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatListModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDialogModule,\n    MatSnackBarModule\n\n\n  ]\n})\nexport class NgMaterialModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'quick-notes';\n}\n","<!--<div>-->\n  <app-notes></app-notes>\n<!--</div>-->","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport {RouterModule, Routes} from '@angular/router';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NoteListComponent } from './components/note-list/note-list.component';\nimport { NotesComponent } from './components/notes/notes.component';\nimport { NoteListItemComponent } from './components/note-list-item/note-list-item.component';\nimport { NoteEdtDialogComponent } from './components/note-edt-dialog/note-edt-dialog.component';\nimport { HeaderComponent } from './components/header/header.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NoteService } from './services/note.service';\nimport { NgMaterialModule } from './NgMaterialModule';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AngularFireModule } from '@angular/fire';\nimport { AngularFirestoreModule } from '@angular/fire/firestore';\nimport { environment } from 'src/environments/environment';\nimport { MatSelectModule } from '@angular/material/select';\nimport { NoteSortDialogComponent } from './components/note-sort-dialog/note-sort-dialog.component';\nimport { LoginComponent } from './components/login/login.component';\n//import { HttpClientModule } from '@angular/common/http';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NoteListComponent,\n    NoteListComponent,\n    NotesComponent,\n    NoteListItemComponent,\n    NoteEdtDialogComponent,\n    HeaderComponent,\n    NoteSortDialogComponent,\n    LoginComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    //HttpClientModule,\n    NgMaterialModule,\n    ReactiveFormsModule,\n    /*RouterModule.forRoot([\n      {path:'', redirectTo:'',pathMatch:'full'}\n    ]),*/\n\n    BrowserAnimationsModule,\n    AngularFireModule.initializeApp(environment.firebaseConfig, 'quick-notes'),\n    AngularFirestoreModule,     // Only required for database features\n    MatSelectModule,\n  ],\n  providers: [\n    NoteService\n  ],\n  bootstrap: [AppComponent],\n  entryComponents: [NoteEdtDialogComponent]\n})\nexport class AppModule { }\n","import {Component, EventEmitter, Output} from '@angular/core';\n\n/**\n * Header for the app. Contains Add button, emits event to Notes component when clicked.\n */\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css'],\n})\nexport class HeaderComponent {\n\n  @Output() onAddClick = new EventEmitter<void>();\n  @Output() onSortClick = new EventEmitter<void>();\n\n}\n","<mat-toolbar>\n  <span>My Notes</span>\n  <span class=\"toolbar-spacer\"></span>\n  <mat-icon (click)=\"onSortClick.emit()\">sort</mat-icon>\n  <mat-icon (click)=\"onAddClick.emit()\">add</mat-icon>\n</mat-toolbar>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport {Note} from '../../interfaces/note';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  noteForm = new FormGroup({\n    secret: new FormControl('', [\n      Validators.required,\n      Validators.maxLength(100),\n    ]),\n  });  \n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1 mat-dialog-title> Note login</h1>\n<form [formGroup]=\"noteForm\">\n    <div mat-dialog-content>\n\n        <mat-form-field>\n            <textarea matInput placeholder=\"Enter Secret Key\" id=\"secret\" name=\"secret\"\n                      matTextareaAutosize matAutosizeMinRows=1 matAutosizeMaxRows=1\n                      formControlName=\"secret\" cdkFocusInitial>\n            </textarea>\n          </mat-form-field>\n          <mat-error *ngIf=\"noteForm.controls['secret'].hasError('required')\">\n            Secret Key is required.\n          </mat-error>\n          <mat-error *ngIf=\"noteForm.controls['secret'].hasError('maxlength')\">\n            Secret Key must be less than 100 characters.\n          </mat-error>\n\n    </div>\n    <mat-dialog-actions align=\"end\">\n        <button mat-button [mat-dialog-close]=\"noteForm.value\" [disabled]=\"noteForm.invalid\">Save</button>\n    </mat-dialog-actions>\n</form>","import {Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport {Note} from '../../interfaces/note';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\ninterface NoteFormat {\n  value: string;\n  viewValue: string;\n}\n/**\n * Modal dialog shown for adding/editing (not implemented) notes.\n * Uses Angular Material's MatDialog, and Angular Reactive forms for client-side validation.\n */\n@Component({\n  selector: 'app-note-edt-dialog',\n  templateUrl: './note-edt-dialog.component.html',\n  styleUrls: ['./note-edt-dialog.component.css'],\n})\nexport class NoteEdtDialogComponent {\n\n  noteForm = new FormGroup({\n    title: new FormControl('', [\n      Validators.required,\n      Validators.maxLength(255),\n    ]),\n    content: new FormControl('', [\n      Validators.required,\n      Validators.maxLength(1024),\n    ]),\n    category: new FormControl('', [\n      Validators.required,\n    ])\n  });  \n\n  notes: NoteFormat[] = [\n    {value: 'Personal', viewValue: 'Personal'},\n    {value: 'Business', viewValue: 'Business'},\n    {value: 'Interests', viewValue: 'Interests'},\n    {value: 'Todo', viewValue: 'To do'},\n    {value: 'Shopping', viewValue: 'Shopping'},\n    {value: 'Others', viewValue: 'Others'}\n  ];\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Note) {\n  }\n\n\n}\n","<h1 mat-dialog-title>New Note</h1>\n<form [formGroup]=\"noteForm\">\n  <div mat-dialog-content>\n    <mat-form-field>\n      <textarea matInput placeholder=\"Title\" id=\"title\" name=\"title\"\n                matTextareaAutosize matAutosizeMinRows=1 matAutosizeMaxRows=6\n                formControlName=\"title\" cdkFocusInitial>\n\n      </textarea>\n    </mat-form-field>\n    <mat-error *ngIf=\"noteForm.controls['title'].hasError('required')\">\n      A title is required.\n    </mat-error>\n    <mat-error *ngIf=\"noteForm.controls['title'].hasError('maxlength')\">\n      The title must be less than 255 characters.\n    </mat-error>\n\n\n    <mat-form-field>\n    <textarea matInput placeholder=\"Content\" id=\"content\" name=\"content\"\n              matTextareaAutosize matAutosizeMinRows=5 matAutosizeMaxRows=10\n              formControlName=\"content\">\n    </textarea>\n\n      <mat-error *ngIf=\"noteForm.controls['content'].hasError('required')\">\n        The note's content is required.\n      </mat-error>\n      <mat-error *ngIf=\"noteForm.controls['content'].hasError('maxlength')\">\n        The note's content must be less than 1024 characters.\n      </mat-error>\n\n\n    </mat-form-field>\n\n    <mat-form-field>\n\n      <mat-label>Notes Category</mat-label>\n      <mat-select matInput placeholder=\"Category\" id=\"category\" name=\"category\" formControlName=\"category\">\n        <mat-option *ngFor=\"let note of notes\" [value]=\"note.value\">\n          {{note.viewValue}}\n        </mat-option>\n      </mat-select>\n  \n       <mat-error *ngIf=\"noteForm.controls['category'].hasError('required')\">\n          The note's category is required.\n        </mat-error>  \n  \n      </mat-form-field>\n\n  </div>\n  <mat-dialog-actions align=\"end\">\n    <button mat-button [mat-dialog-close]=\"noteForm.value\"\n            [disabled]=\"noteForm.invalid\">Save</button>\n  </mat-dialog-actions>\n</form>\n","import {Component, Input} from '@angular/core';\nimport {Note} from '../../interfaces/note';\n\n/**\n * Presentational component representing a single note in the list.\n */\n@Component({\n  selector: 'app-note-list-item',\n  templateUrl: './note-list-item.component.html',\n  styleUrls: ['./note-list-item.component.css']\n})\nexport class NoteListItemComponent {\n\n  @Input() note: Note;\n\n  public setBg(): string {\n    if(this.note.category == 'Personal')\n      return '#f3eadb';\n    if(this.note.category == 'Business')\n      return '#feff9c';\n    if(this.note.category == 'Shopping')\n      return '#daf8e3';\n    if(this.note.category == 'Interests')\n    return '#c9df8a';\n    if(this.note.category == 'Todo')\n    return '#dbc9ef';\n    if(this.note.category == 'Others')\n    return '#ffd7b5';\n  }\n}\n","<mat-card [style.background-color]=\"setBg()\">\n    <mat-card-title>{{note.title}} <a href=\"https://web.whatsapp.com/send?text=*{{note.title}}* : {{note.content}}\" \n      data-action=\"#\" target=\"_blank\" ><span class=\"material-icons float-right\">share</span></a></mat-card-title>\n    <mat-card-content>{{note.content}}</mat-card-content>\n    <div class=\"mat-card-category\">#{{note.category}}</div>\n</mat-card>","import {Component, Input} from '@angular/core';\nimport {Note} from '../../interfaces/note';\n\n/**\n * List of notes displayed by the app.\n * Responsible for showing note list items, or a message if there are none to display.\n */\n@Component({\n  selector: 'app-note-list',\n  templateUrl: './note-list.component.html',\n  styleUrls: ['./note-list.component.css'],\n})\nexport class NoteListComponent {\n\n  @Input() notes: Note[];\n\n  /**\n   * helper\n   * @returns {boolean} true if the note list should be shown, false otherwise\n   * @private\n   */\n  public _isNoteListEmpty(): boolean {\n    return !this.notes || !this.notes.length;\n  }\n}\n","<mat-list>\n  <p *ngIf=\"_isNoteListEmpty()\">There are no notes.</p>\n  <app-note-list-item *ngFor=\"let note of notes\" [note]=\"note\"></app-note-list-item>\n</mat-list>\n\n\n","import { Component, OnInit, Inject } from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport {Note} from '../../interfaces/note';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\ninterface NoteFormat {\n  value: string;\n  viewValue: string;\n}\n\n@Component({\n  selector: 'app-note-sort-dialog',\n  templateUrl: './note-sort-dialog.component.html',\n  styleUrls: ['./note-sort-dialog.component.css']\n})\nexport class NoteSortDialogComponent implements OnInit {\n\n  noteForm = new FormGroup({\n    category: new FormControl('', [])\n  });  \n\n  notes: NoteFormat[] = [\n    {value: 'Personal', viewValue: 'Personal'},\n    {value: 'Business', viewValue: 'Business'},\n    {value: 'Interests', viewValue: 'Interests'},\n    {value: 'Todo', viewValue: 'To do'},\n    {value: 'Shopping', viewValue: 'Shopping'},\n    {value: 'Others', viewValue: 'Others'},\n    {value: 'All', viewValue: 'All'}\n  ];\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Note) {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1 mat-dialog-title>Sort Note</h1>\n<form [formGroup]=\"noteForm\">\n    <div mat-dialog-content>\n        <mat-form-field>\n\n            <mat-label>Sort by Category</mat-label>\n            <mat-select matInput placeholder=\"Category\" id=\"category\" name=\"category\" formControlName=\"category\">\n                <mat-option *ngFor=\"let note of notes\" [value]=\"note.value\">\n                    {{note.viewValue}}\n                </mat-option>\n            </mat-select>\n\n        </mat-form-field>\n\n    </div>\n    <mat-dialog-actions align=\"end\">\n        <button mat-button [mat-dialog-close]=\"noteForm.value\" >Save</button>\n    </mat-dialog-actions>\n</form>","import {Component, OnInit} from '@angular/core';\nimport {Note} from '../../interfaces/note';\nimport {NoteService} from '../../services/note.service';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {NoteEdtDialogComponent} from '../note-edt-dialog/note-edt-dialog.component';\nimport {NoteSortDialogComponent} from '../note-sort-dialog/note-sort-dialog.component'\nimport { NotExpr } from '@angular/compiler';\nimport { LoginComponent } from '../login/login.component';\n\n/**\n * Top-level stateful component which handles notes, retrieves them from the API using a service,\n * and shows/hides dialog for adding notes. Acts in response to events from children.\n */\n@Component({\n  selector: 'app-notes',\n  templateUrl: './notes.component.html',\n  styleUrls: ['./notes.component.css']\n})\nexport class NotesComponent implements OnInit {\n\n  public _notes: Note[];\n  public _allNotes: Note[]=[];\n  private readonly SNACKBAR_DELAY: number = 1000;\n\n  private secretKey = 'secretKeyTosecureNotes';\n\n  constructor(\n    private _noteService: NoteService,\n    private _dialog: MatDialog,\n    private _snackBar: MatSnackBar\n  ) {\n  }\n\n  ngOnInit(): void {\n    if(localStorage.getItem('receivedSK') == this.secretKey)\n      this._getAllNotes();\n    else\n      this.verifyUser()   \n  }\n\n  private verifyUser() {\n    const dialogRef = this._dialog.open(LoginComponent, {\n      height: '200px',\n      width: '400px',\n      data: {note: {}}\n    });\n  \n    dialogRef.afterClosed()\n      .subscribe((result) => {\n        if(!result){\n          this.verifyUser()\n        }\n        else if (result.secret == this.secretKey) {\n          this._getAllNotes();\n          localStorage.setItem('receivedSK', 'secretKeyTosecureNotes');\n        }\n        else{\n          this.verifyUser()\n        }\n      })\n  }\n  /**\n   * Delegates to the NoteService to retrieve the list of notes from the server.\n   * @private\n   */\n  private _getAllNotes(): void {\n    this._noteService.getAllNotes()\n      .subscribe((notes) => {\n          this._notes = notes;\n        },\n        (error) => {\n          this._snackBar.open('There was a problem retrieving notes from the server', 'Ok', {duration: this.SNACKBAR_DELAY});\n          console.log('Error retrieving notes', error);\n        });\n  }\n\n  /**\n   * Called when onAddClick event emmitted by the header. Shows the add note dialog.\n   * @private\n   */\n  public _onAddClick(): void {\n    const dialogRef = this._dialog.open(NoteEdtDialogComponent, {\n      height: '500px',\n      width: '700px',\n      data: {note: {}}\n    });\n\n    dialogRef.afterClosed()\n      .subscribe((result) => {\n        if (!result) {\n          return;\n        }\n        const note: Note = {\n          title: result.title,\n          content: result.content,\n          category: result.category,\n          createdOn: Date.now()\n        };\n        this._noteService.addNote(note)\n          .subscribe((added: Note) => {\n            console.log('added note', {added});\n            this._snackBar.open('Note added.', 'Ok', {duration: this.SNACKBAR_DELAY});\n            this._getAllNotes();\n          }, (error: any) => {\n            console.log('error adding note', {error});\n            this._snackBar.open('There was a problem adding the note.');\n          });\n      });\n  }\n\n  public _onSortClick(): void {\n    const dialogRef = this._dialog.open(NoteSortDialogComponent, {\n      height: '200px',\n      width: '300px',\n      data: {note: {}}\n    });\n\n    dialogRef.afterClosed()\n      .subscribe((result) => {\n        if (!result) {\n          return;\n        }\n        if(result.category == 'All')\n          this._getAllNotes();\n        else {\n          if (this._allNotes.length == 0)\n            this._allNotes = this._notes;\n          this._notes = [];\n          for (let note of this._allNotes) {\n            if (note.category == result.category)\n              this._notes.push(note)\n          }\n        }\n      });\n  }\n \n}\n","<app-header (onAddClick)=\"_onAddClick()\" (onSortClick)=\"_onSortClick()\"></app-header>\n\n<div class=\"container\">\n  <app-note-list [notes]=\"_notes\"></app-note-list>\n</div>\n","import {Injectable} from '@angular/core';\nimport {Observable, defer} from 'rxjs';\nimport {Note} from '../interfaces/note';\n//import {HttpClient} from '@angular/common/http';\nimport { AngularFireDatabase, AngularFireList } from '@angular/fire/database';\nimport { AngularFirestore } from \"@angular/fire/firestore\";\n//import { FirebaseListObservable, FirebaseObjectObservable, AngularFireDatabase } from 'angularfire2/database';\n\nimport { tap,catchError, map } from 'rxjs/operators';\nimport { from } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NoteService {\n\n  notesRef: AngularFireList<any>;      // Reference to notes list, Its an Observable\n  //readonly API_URL = environment.apiUrlRoot + '/notes';\n\n  constructor(/*private _http: HttpClient*/ private db: AngularFireDatabase, protected firestore: AngularFirestore) {\n  }\n\n\n  public getAllNotes(): Observable<Note[]> {\n    return this.firestore.collection<Note>('notes').valueChanges()\n    /*this.notesRef = this.db.list('notes');\n    return this.notesRef as Observable<Note[]>;\n    //return this._http.get(this.API_URL) as Observable<Note[]>;*/\n  }\n  //const id = this.firestore.createId();\n  //const doc = this.firestore.collection('notes').doc(id).get();\n\n  public addNote(note: Note){\n    const id = this.firestore.createId();\n    //this.firestore.collection<Note>('notes').doc(id).set(note, {merge: true})\n    //.pipe(map(response => JSON.stringify(response)));\n\n    const promToOb = new Promise<Note>((resolve, reject) =>{\n      this.firestore\n          .collection(\"notes\")\n          .add(note)\n          .then(res => {}, err => reject(err));\n  });\n\n  return from(promToOb);\n\n    //return defer(() => this.firestore.collection<Note>('notes').doc(id).set(note, {merge: true}));\n    //return this.firestore.collection<Note>(\"notes\").add(note);\n    /*.then(res => {}, err => reject(err));\n    return this.firestore.collection<Note>('notes').add(note)\n    //const id = this.firestore.createId();\n    //return this.firestore.collection.set(Object.assign({}, { id }, note)).then()\n    //return this._http.post(this.API_URL, note) as Observable<Note>;\n    return new Promise<Note[]>((resolve, reject) =>{\n      this.firestore\n          .collection(\"notes\")\n          .add(note)\n          .then(res => {}, err => reject(err));\n  });*/\n  }\n\n  /*public AddUser(note: Note) {\n    this.notesRef.push({\n      id: note.id,\n      title: note.title,\n      content: note.content,\n      category: note.category\n    })*/\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  firebaseConfig: {\n    apiKey: \"AIzaSyDvcy1pHAWxIRrwZvDOhWaEGYF8nzXncfU\",\n    authDomain: \"quick-notes-c34ea.firebaseapp.com\",\n    databaseURL: \"https://quick-notes-c34ea.firebaseio.com\",\n    projectId: \"quick-notes-c34ea\",\n    storageBucket: \"quick-notes-c34ea.appspot.com\",\n    messagingSenderId: \"190423106850\",\n    appId: \"1:190423106850:web:51d28294bebd6278f3117b\"\n  }\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}