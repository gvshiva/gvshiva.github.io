{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/NgMaterialModule.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/header/header.component.ts","webpack:///src/app/components/header/header.component.html","webpack:///src/app/components/login/login.component.ts","webpack:///src/app/components/login/login.component.html","webpack:///src/app/components/note-edt-dialog/note-edt-dialog.component.ts","webpack:///src/app/components/note-edt-dialog/note-edt-dialog.component.html","webpack:///src/app/components/note-list-item/note-list-item.component.ts","webpack:///src/app/components/note-list-item/note-list-item.component.html","webpack:///src/app/components/note-list/note-list.component.ts","webpack:///src/app/components/note-list/note-list.component.html","webpack:///src/app/components/note-sort-dialog/note-sort-dialog.component.ts","webpack:///src/app/components/note-sort-dialog/note-sort-dialog.component.html","webpack:///src/app/components/notes/notes.component.ts","webpack:///src/app/components/notes/notes.component.html","webpack:///src/app/services/note.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","NgMaterialModule","imports","routes","AppRoutingModule","forRoot","AppComponent","title","selector","templateUrl","styleUrls","AppModule","initializeApp","firebaseConfig","declarations","providers","bootstrap","entryComponents","HeaderComponent","onAddClick","onSortClick","LoginComponent","noteForm","secret","required","maxLength","NoteEdtDialogComponent","data","content","category","notes","value","viewValue","NoteListItemComponent","note","NoteListComponent","length","NoteSortDialogComponent","NotesComponent","_noteService","_dialog","_snackBar","_allNotes","SNACKBAR_DELAY","secretKey","localStorage","getItem","_getAllNotes","verifyUser","dialogRef","open","height","width","afterClosed","subscribe","result","setItem","getAllNotes","_notes","error","duration","console","log","createdOn","Date","now","addNote","added","push","_onAddClick","_onSortClick","NoteService","db","firestore","collection","valueChanges","createId","promToOb","reject","add","res","err","providedIn","environment","production","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","bootstrapModule"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAcA;;;;;QA+BaC,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBA3BlB,CACP,4FADO,EAEP,2EAFO,EAGP,oEAHO,EAIP,oEAJO,EAKP,+EALO,EAMP,sEANO,EAOP,wEAPO,EAQP,oEARO,EASP,wEATO,EAUP,6EAVO,CA2BkB,EAdzB,4FAcyB,EAbzB,2EAayB,EAZzB,oEAYyB,EAXzB,oEAWyB,EAVzB,+EAUyB,EATzB,sEASyB,EARzB,wEAQyB,EAPzB,oEAOyB,EANzB,wEAMyB,EALzB,6EAKyB;;;;0HAAhBA,gB,EAAgB;AAAA,kBA1BzB,4FA0ByB,EAzBzB,2EAyByB,EAxBzB,oEAwByB,EAvBzB,oEAuByB,EAtBzB,+EAsByB,EArBzB,sEAqByB,EApBzB,wEAoByB,EAnBzB,oEAmByB,EAlBzB,wEAkByB,EAjBzB,6EAiByB;AAjBR,kBAGjB,4FAHiB,EAIjB,2EAJiB,EAKjB,oEALiB,EAMjB,oEANiB,EAOjB,+EAPiB,EAQjB,sEARiB,EASjB,wEATiB,EAUjB,oEAViB,EAWjB,wEAXiB,EAYjB,6EAZiB;AAiBQ,O;AALR,K;;;;;sEAKRA,gB,EAAgB;cA5B5B,sDA4B4B;eA5BnB;AACRC,iBAAO,EAAE,CACP,4FADO,EAEP,2EAFO,EAGP,oEAHO,EAIP,oEAJO,EAKP,+EALO,EAMP,sEANO,EAOP,wEAPO,EAQP,oEARO,EASP,wEATO,EAUP,6EAVO,CADD;AAaRH,iBAAO,EAAE,CACP,4FADO,EAEP,2EAFO,EAGP,oEAHO,EAIP,oEAJO,EAKP,+EALO,EAMP,sEANO,EAOP,wEAPO,EAQP,oEARO,EASP,wEATO,EAUP,6EAVO;AAbD,S;AA4BmB,Q;;;;;;;;;;;;;;;;;;AC7C7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAIA,QAAMI,MAAM,GAAW,EAAvB;;QAMaC,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHlB,CAAC,6DAAaC,OAAb,CAAqBF,MAArB,CAAD,CAGkB,EAFjB,4DAEiB;;;;0HAAhBC,gB,EAAgB;AAAA;AAAA,kBAFjB,4DAEiB;AAAA,O;AAFL,K;;;;;sEAEXA,gB,EAAgB;cAJ5B,sDAI4B;eAJnB;AACRF,iBAAO,EAAE,CAAC,6DAAaG,OAAb,CAAqBF,MAArB,CAAD,CADD;AAERJ,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAImB,Q;;;;;;;;;;;;;;;;;;ACV7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaO,Y,GALb;AAAA;;AAME,WAAAC,KAAA,GAAQ,aAAR;AACD,K;;;uBAFYD,Y;AAAY,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA;AAAA;ACNvB;;;;;;;;;sEDMWA,Y,EAAY;cALxB,uDAKwB;eALd;AACTE,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,qBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;AEPzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,qD,CAsBA;;;QAqCaC,S;;;;;YAAAA,S;AAAS,kBAHR,2DAGQ;;;;yBAATA,S;AAAS,O;AAAA,iBANT,CACT,mEADS,C;AAEV,gBAlBQ,CACP,uEADO,EAEP,oEAFO,EAGP,0DAHO,EAIP;AACA,yEALO,EAMP,kEANO;AAOP;;;AAIA,mGAXO,EAYP,iEAAkBC,aAAlB,CAAgC,0EAAYC,cAA5C,EAA4D,aAA5D,CAZO,EAaP,+EAbO,EAcP,yEAdO,CAkBR;;;;0HAIUF,S,EAAS;AAAA,uBAhClB,2DAgCkB,EA/BlB,2FA+BkB,EA9BlB,2FA8BkB,EA7BlB,gFA6BkB,EA5BlB,yGA4BkB,EA3BlB,4GA2BkB,EA1BlB,mFA0BkB,EAzBlB,gHAyBkB,EAxBlB,iFAwBkB;AAxBJ,kBAGd,uEAHc,EAId,oEAJc,EAKd,0DALc,EAMd;AACA,2EAPc,EAQd,kEARc;AASd;;;AAIA,qGAbc,EAaS,gEAbT,EAed,+EAfc,EAgBd,yEAhBc;AAwBI,O;AARH,K;;;;;sEAQNA,S,EAAS;cAlCrB,sDAkCqB;eAlCZ;AACRG,sBAAY,EAAE,CACZ,2DADY,EAEZ,2FAFY,EAGZ,2FAHY,EAIZ,gFAJY,EAKZ,yGALY,EAMZ,4GANY,EAOZ,mFAPY,EAQZ,gHARY,EASZ,iFATY,CADN;AAYRZ,iBAAO,EAAE,CACP,uEADO,EAEP,oEAFO,EAGP,0DAHO,EAIP;AACA,6EALO,EAMP,kEANO;AAOP;;;AAIA,uGAXO,EAYP,iEAAkBU,aAAlB,CAAgC,0EAAYC,cAA5C,EAA4D,aAA5D,CAZO,EAaP,+EAbO,EAcP,yEAdO,CAZD;AA4BRE,mBAAS,EAAE,CACT,mEADS,CA5BH;AA+BRC,mBAAS,EAAE,CAAC,2DAAD,CA/BH;AAgCRC,yBAAe,EAAE,CAAC,4GAAD;AAhCT,S;AAkCY,Q;;;;;;;;;;;;;;;;;;AC3DtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;;;;;QASaC,e,GALb;AAAA;;AAOY,WAAAC,UAAA,GAAa,IAAI,0DAAJ,EAAb;AACA,WAAAC,WAAA,GAAc,IAAI,0DAAJ,EAAd;AAEX,K;;;uBALYF,e;AAAe,K;;;YAAfA,e;AAAe,iC;AAAA;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,mD;AAAA;AAAA;ACX5B;;AACE;;AAAM;;AAAQ;;AACd;;AACA;;AAAU;AAAA,mBAAS,IAAAE,WAAA,OAAT;AAA2B,WAA3B;;AAA6B;;AAAI;;AAC3C;;AAAU;AAAA,mBAAS,IAAAD,UAAA,OAAT;AAA0B,WAA1B;;AAA4B;;AAAG;;AAC3C;;;;;;;;;sEDMaD,e,EAAe;cAL3B,uDAK2B;eALjB;AACTV,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;gBAEzB;;;gBACA;;;;;;;;;;;;;;;;;;;;AEdH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACUU;;AACE;;AACF;;;;;;AACA;;AACE;;AACF;;;;QDLGW,c;AASX,gCAAc;AAAA;;AAPd,aAAAC,QAAA,GAAW,IAAI,wDAAJ,CAAc;AACvBC,gBAAM,EAAE,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,CAC1B,0DAAWC,QADe,EAE1B,0DAAWC,SAAX,CAAqB,GAArB,CAF0B,CAApB;AADe,SAAd,CAAX;AAOiB;;;;mCAET,CACP;;;;;;;uBAZUJ,c;AAAc,K;;;YAAdA,c;AAAc,gC;AAAA,e;AAAA,a;AAAA,wY;AAAA;AAAA;ACV3B;;AAAsB;;AAAU;;AAChC;;AACI;;AAEI;;AACI;;AAGA;;AAAA;;AACF;;AACA;;AAGA;;AAIN;;AACA;;AACI;;AAAqF;;AAAI;;AAC7F;;AACJ;;;;AApBM;;AAAA;;AASe;;AAAA;;AAGA;;AAAA;;AAMM;;AAAA,2GAAmC,UAAnC,EAAmC,oBAAnC;;;;;;;;;sEDTdA,c,EAAc;cAL1B,uDAK0B;eALhB;AACTb,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;AEV3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACUI;;AACE;;AACF;;;;;;AACA;;AACE;;AACF;;;;;;AASE;;AACE;;AACF;;;;;;AACA;;AACE;;AACF;;;;;;AASE;;AACE;;AACF;;;;;;AAFuC;;AACrC;;AAAA;;;;;;AAIH;;AACG;;AACF;;;ADpCR;;;;;;QASagB,sB,GAyBX,gCAA4CC,IAA5C,EAAwD;AAAA;;AAAZ,WAAAA,IAAA,GAAAA,IAAA;AAvB5C,WAAAL,QAAA,GAAW,IAAI,wDAAJ,CAAc;AACvBf,aAAK,EAAE,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,CACzB,0DAAWiB,QADc,EAEzB,0DAAWC,SAAX,CAAqB,GAArB,CAFyB,CAApB,CADgB;AAKvBG,eAAO,EAAE,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,CAC3B,0DAAWJ,QADgB,EAE3B,0DAAWC,SAAX,CAAqB,IAArB,CAF2B,CAApB,CALc;AASvBI,gBAAQ,EAAE,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,CAC5B,0DAAWL,QADiB,CAApB;AATa,OAAd,CAAX;AAcA,WAAAM,KAAA,GAAsB,CACpB;AAACC,aAAK,EAAE,UAAR;AAAoBC,iBAAS,EAAE;AAA/B,OADoB,EAEpB;AAACD,aAAK,EAAE,UAAR;AAAoBC,iBAAS,EAAE;AAA/B,OAFoB,EAGpB;AAACD,aAAK,EAAE,WAAR;AAAqBC,iBAAS,EAAE;AAAhC,OAHoB,EAIpB;AAACD,aAAK,EAAE,MAAR;AAAgBC,iBAAS,EAAE;AAA3B,OAJoB,EAKpB;AAACD,aAAK,EAAE,UAAR;AAAoBC,iBAAS,EAAE;AAA/B,OALoB,EAMpB;AAACD,aAAK,EAAE,QAAR;AAAkBC,iBAAS,EAAE;AAA7B,OANoB,CAAtB;AAUC,K;;;uBA1BUN,sB,EAAsB,gEAyBb,wEAzBa,C;AAyBE,K;;;YAzBxBA,sB;AAAsB,0C;AAAA,e;AAAA,a;AAAA,+tB;AAAA;AAAA;AClBnC;;AAAqB;;AAAQ;;AAC7B;;AACE;;AACE;;AACE;;AAIA;;AAAA;;AACF;;AACA;;AAGA;;AAKA;;AACA;;AAGA;;AAAA;;AAEE;;AAGA;;AAKF;;AAEA;;AAEE;;AAAW;;AAAc;;AACzB;;AACE;;AAGF;;AAEC;;AAID;;AAEJ;;AACA;;AACE;;AACsC;;AAAI;;AAC5C;;AACF;;;;AArDM;;AAAA;;AASS;;AAAA;;AAGA;;AAAA;;AAWE;;AAAA;;AAGA;;AAAA;;AAWG;;AAAA;;AAKF;;AAAA;;AAQK;;AAAA,2GAAmC,UAAnC,EAAmC,oBAAnC;;;;;;;;;sEDjCVA,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTlB,kBAAQ,EAAE,qBADD;AAETC,qBAAW,EAAE,kCAFJ;AAGTC,mBAAS,EAAE,CAAC,iCAAD;AAHF,S;AAKwB,Q;;;;kBAyBpB,oD;mBAAO,wE;;;;;;;;;;;;;;;;;;;;;AE3CtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAGA;;;;;QAQauB,qB;;;;;;;gCAIC;AACV,cAAG,KAAKC,IAAL,CAAUL,QAAV,IAAsB,UAAzB,EACE,OAAO,SAAP;AACF,cAAG,KAAKK,IAAL,CAAUL,QAAV,IAAsB,UAAzB,EACE,OAAO,SAAP;AACF,cAAG,KAAKK,IAAL,CAAUL,QAAV,IAAsB,UAAzB,EACE,OAAO,SAAP;AACF,cAAG,KAAKK,IAAL,CAAUL,QAAV,IAAsB,WAAzB,EACA,OAAO,SAAP;AACA,cAAG,KAAKK,IAAL,CAAUL,QAAV,IAAsB,MAAzB,EACA,OAAO,SAAP;AACA,cAAG,KAAKK,IAAL,CAAUL,QAAV,IAAsB,QAAzB,EACA,OAAO,SAAP;AACD;;;;;;;uBAjBUI,qB;AAAqB,K;;;YAArBA,qB;AAAqB,yC;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,a;AAAA,mI;AAAA;AAAA;ACXlC;;AACI;;AAAgB;;AAAe;;AACI;;AAAyC;;AAAK;;AAAO;;AAAI;;AAC5F;;AAAkB;;AAAgB;;AAClC;;AAA+B;;AAAkB;;AACrD;;;;AALU;;AACU;;AAAA;;AAAkB;;AAAA;;AAEhB;;AAAA;;AACa;;AAAA;;;;;;;;;sEDOtBA,qB,EAAqB;cALjC,uDAKiC;eALvB;AACTzB,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKuB,Q;;gBAE/B;;;;;;;;;;;;;;;;;;;;AEbH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACCE;;AAA8B;;AAAmB;;;;;;AACjD;;;;;;AAA+C;;;ADCjD;;;;;;QASayB,iB;;;;;;;;AAIX;;;;;2CAKuB;AACrB,iBAAO,CAAC,KAAKL,KAAN,IAAe,CAAC,KAAKA,KAAL,CAAWM,MAAlC;AACD;;;;;;;uBAXUD,iB;AAAiB,K;;;YAAjBA,iB;AAAiB,oC;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,4E;AAAA;AAAA;ACZ9B;;AACE;;AACA;;AACF;;;;AAFK;;AAAA;;AACiB;;AAAA;;;;;;;;;sEDUTA,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACT3B,kBAAQ,EAAE,eADD;AAETC,qBAAW,EAAE,4BAFJ;AAGTC,mBAAS,EAAE,CAAC,2BAAD;AAHF,S;AAKmB,Q;;gBAE3B;;;;;;;;;;;;;;;;;;;;AEdH;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACOgB;;AACI;;AACJ;;;;;;AAFuC;;AACnC;;AAAA;;;;QDOP2B,uB;AAgBX,uCAA4CV,IAA5C,EAAwD;AAAA;;AAAZ,aAAAA,IAAA,GAAAA,IAAA;AAd5C,aAAAL,QAAA,GAAW,IAAI,wDAAJ,CAAc;AACvBO,kBAAQ,EAAE,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,EAApB;AADa,SAAd,CAAX;AAIA,aAAAC,KAAA,GAAsB,CACpB;AAACC,eAAK,EAAE,UAAR;AAAoBC,mBAAS,EAAE;AAA/B,SADoB,EAEpB;AAACD,eAAK,EAAE,UAAR;AAAoBC,mBAAS,EAAE;AAA/B,SAFoB,EAGpB;AAACD,eAAK,EAAE,WAAR;AAAqBC,mBAAS,EAAE;AAAhC,SAHoB,EAIpB;AAACD,eAAK,EAAE,MAAR;AAAgBC,mBAAS,EAAE;AAA3B,SAJoB,EAKpB;AAACD,eAAK,EAAE,UAAR;AAAoBC,mBAAS,EAAE;AAA/B,SALoB,EAMpB;AAACD,eAAK,EAAE,QAAR;AAAkBC,mBAAS,EAAE;AAA7B,SANoB,EAOpB;AAACD,eAAK,EAAE,KAAR;AAAeC,mBAAS,EAAE;AAA1B,SAPoB,CAAtB;AAWC;;;;mCAEO,CACP;;;;;;;uBApBUK,uB,EAAuB,gEAgBd,wEAhBc,C;AAgBC,K;;;YAhBxBA,uB;AAAuB,2C;AAAA,e;AAAA,a;AAAA,wT;AAAA;AAAA;ACfpC;;AAAqB;;AAAS;;AAC9B;;AACI;;AACI;;AAEI;;AAAW;;AAAgB;;AAC3B;;AACI;;AAGJ;;AAEJ;;AAEJ;;AACA;;AACI;;AAAwD;;AAAI;;AAChE;;AACJ;;;;AAjBM;;AAAA;;AAMsB;;AAAA;;AASD;;AAAA;;;;;;;;;sEDDdA,uB,EAAuB;cALnC,uDAKmC;eALzB;AACT7B,kBAAQ,EAAE,sBADD;AAETC,qBAAW,EAAE,mCAFJ;AAGTC,mBAAS,EAAE,CAAC,kCAAD;AAHF,S;AAKyB,Q;;;;kBAgBrB,oD;mBAAO,wE;;;;;;;;;;;;;;;;;;;;;AE/BtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAUA;;;;;;QASa4B,c;AAQX,8BACUC,YADV,EAEUC,OAFV,EAGUC,SAHV,EAGgC;AAAA;;AAFtB,aAAAF,YAAA,GAAAA,YAAA;AACA,aAAAC,OAAA,GAAAA,OAAA;AACA,aAAAC,SAAA,GAAAA,SAAA;AARH,aAAAC,SAAA,GAAkB,EAAlB;AACU,aAAAC,cAAA,GAAyB,IAAzB;AAET,aAAAC,SAAA,GAAY,wBAAZ;AAOP;;;;mCAEO;AACN,cAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,KAAsC,KAAKF,SAA9C,EACE,KAAKG,YAAL,GADF,KAGE,KAAKC,UAAL;AACH;;;qCAEoB;AAAA;;AACnB,cAAMC,SAAS,GAAG,KAAKT,OAAL,CAAaU,IAAb,CAAkB,qEAAlB,EAAkC;AAClDC,kBAAM,EAAE,OAD0C;AAElDC,iBAAK,EAAE,OAF2C;AAGlDzB,gBAAI,EAAE;AAACO,kBAAI,EAAE;AAAP;AAH4C,WAAlC,CAAlB;;AAMAe,mBAAS,CAACI,WAAV,GACGC,SADH,CACa,UAACC,MAAD,EAAY;AACrB,gBAAG,CAACA,MAAJ,EAAW;AACT,mBAAI,CAACP,UAAL;AACD,aAFD,MAGK,IAAIO,MAAM,CAAChC,MAAP,IAAiB,KAAI,CAACqB,SAA1B,EAAqC;AACxC,mBAAI,CAACG,YAAL;;AACAF,0BAAY,CAACW,OAAb,CAAqB,YAArB,EAAmC,wBAAnC;AACD,aAHI,MAID;AACF,mBAAI,CAACR,UAAL;AACD;AACF,WAZH;AAaD;AACD;;;;;;;uCAIoB;AAAA;;AAClB,eAAKT,YAAL,CAAkBkB,WAAlB,GACGH,SADH,CACa,UAACxB,KAAD,EAAW;AAClB,kBAAI,CAAC4B,MAAL,GAAc5B,KAAd;AACD,WAHL,EAII,UAAC6B,KAAD,EAAW;AACT,kBAAI,CAAClB,SAAL,CAAeS,IAAf,CAAoB,sDAApB,EAA4E,IAA5E,EAAkF;AAACU,sBAAQ,EAAE,MAAI,CAACjB;AAAhB,aAAlF;;AACAkB,mBAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCH,KAAtC;AACD,WAPL;AAQD;AAED;;;;;;;sCAIkB;AAAA;;AAChB,cAAMV,SAAS,GAAG,KAAKT,OAAL,CAAaU,IAAb,CAAkB,iGAAlB,EAA0C;AAC1DC,kBAAM,EAAE,OADkD;AAE1DC,iBAAK,EAAE,OAFmD;AAG1DzB,gBAAI,EAAE;AAACO,kBAAI,EAAE;AAAP;AAHoD,WAA1C,CAAlB;;AAMAe,mBAAS,CAACI,WAAV,GACGC,SADH,CACa,UAACC,MAAD,EAAY;AACrB,gBAAI,CAACA,MAAL,EAAa;AACX;AACD;;AACD,gBAAMrB,IAAI,GAAS;AACjB3B,mBAAK,EAAEgD,MAAM,CAAChD,KADG;AAEjBqB,qBAAO,EAAE2B,MAAM,CAAC3B,OAFC;AAGjBC,sBAAQ,EAAE0B,MAAM,CAAC1B,QAHA;AAIjBkC,uBAAS,EAAEC,IAAI,CAACC,GAAL;AAJM,aAAnB;;AAMA,kBAAI,CAAC1B,YAAL,CAAkB2B,OAAlB,CAA0BhC,IAA1B,EACGoB,SADH,CACa,UAACa,KAAD,EAAiB;AAC1BN,qBAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B;AAACK,qBAAK,EAALA;AAAD,eAA1B;;AACA,oBAAI,CAAC1B,SAAL,CAAeS,IAAf,CAAoB,aAApB,EAAmC,IAAnC,EAAyC;AAACU,wBAAQ,EAAE,MAAI,CAACjB;AAAhB,eAAzC;;AACA,oBAAI,CAACI,YAAL;AACD,aALH,EAKK,UAACY,KAAD,EAAgB;AACjBE,qBAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC;AAACH,qBAAK,EAALA;AAAD,eAAjC;;AACA,oBAAI,CAAClB,SAAL,CAAeS,IAAf,CAAoB,sCAApB;AACD,aARH;AASD,WApBH;AAqBD;;;uCAEkB;AAAA;;AACjB,cAAMD,SAAS,GAAG,KAAKT,OAAL,CAAaU,IAAb,CAAkB,oGAAlB,EAA2C;AAC3DC,kBAAM,EAAE,OADmD;AAE3DC,iBAAK,EAAE,OAFoD;AAG3DzB,gBAAI,EAAE;AAACO,kBAAI,EAAE;AAAP;AAHqD,WAA3C,CAAlB;;AAMAe,mBAAS,CAACI,WAAV,GACGC,SADH,CACa,UAACC,MAAD,EAAY;AACrB,gBAAI,CAACA,MAAL,EAAa;AACX;AACD;;AACD,gBAAGA,MAAM,CAAC1B,QAAP,IAAmB,KAAtB,EACE,MAAI,CAACkB,YAAL,GADF,KAEK;AACH,kBAAI,MAAI,CAACL,SAAL,CAAeN,MAAf,IAAyB,CAA7B,EACE,MAAI,CAACM,SAAL,GAAiB,MAAI,CAACgB,MAAtB;AACF,oBAAI,CAACA,MAAL,GAAc,EAAd;;AAHG,yDAIc,MAAI,CAAChB,SAJnB;AAAA;;AAAA;AAIH,oEAAiC;AAAA,sBAAxBR,IAAwB;AAC/B,sBAAIA,IAAI,CAACL,QAAL,IAAiB0B,MAAM,CAAC1B,QAA5B,EACE,MAAI,CAAC6B,MAAL,CAAYU,IAAZ,CAAiBlC,IAAjB;AACH;AAPE;AAAA;AAAA;AAAA;AAAA;AAQJ;AACF,WAhBH;AAiBD;;;;;;;uBApHUI,c,EAAc,mI,EAAA,mI,EAAA,wI;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA,c;AAAA,a;AAAA,gF;AAAA;AAAA;ACnB3B;;AAAY;AAAA,mBAAc,IAAA+B,WAAA,EAAd;AAA2B,WAA3B,EAA4B,aAA5B,EAA4B;AAAA,mBAAgB,IAAAC,YAAA,EAAhB;AAA8B,WAA1D;;AAA4D;;AAExE;;AACE;;AACF;;;;AADiB;;AAAA;;;;;;;;;sEDgBJhC,c,EAAc;cAL1B,uDAK0B;eALhB;AACT9B,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEnB3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAca6D,W;AAGX;AAEA;AAAY;AAAsCC,QAAlD,EAAqFC,SAArF,EAAkH;AAAA;;AAAhE,aAAAD,EAAA,GAAAA,EAAA;AAAmC,aAAAC,SAAA,GAAAA,SAAA;AACpF;;;;sCAGiB;AAChB,iBAAO,KAAKA,SAAL,CAAeC,UAAf,CAAgC,OAAhC,EAAyCC,YAAzC,EAAP;AACA;;;AAGD,S,CACD;AACA;;;;gCAEezC,I,EAAU;AAAA;;AACvB,cAAMlC,EAAE,GAAG,KAAKyE,SAAL,CAAeG,QAAf,EAAX,CADuB,CAEvB;AACA;;AAEA,cAAMC,QAAQ,GAAG,IAAItF,OAAJ,CAAkB,UAACC,OAAD,EAAUsF,MAAV,EAAoB;AACrD,kBAAI,CAACL,SAAL,CACKC,UADL,CACgB,OADhB,EAEKK,GAFL,CAES7C,IAFT,EAGKzC,IAHL,CAGU,UAAAuF,GAAG,EAAI,CAAE,CAHnB,EAGqB,UAAAC,GAAG;AAAA,qBAAIH,MAAM,CAACG,GAAD,CAAV;AAAA,aAHxB;AAIH,WALkB,CAAjB;AAOF,iBAAO,kDAAKJ,QAAL,CAAP,CAZyB,CAcvB;AACA;;AACA;;;;;;;;;;;AAWD;;;;;;;uBA7CUN,W,EAAW,kI,EAAA,gI;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAFV;;;;;sEAEDA,W,EAAW;cAHvB,wDAGuB;eAHZ;AACVW,oBAAU,EAAE;AADF,S;AAGY,Q;;;;;;;;;;;;;;;;;;;;;;;;ACdxB;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMC,WAAW,GAAG;AACzBC,gBAAU,EAAE,KADa;AAEzBvE,oBAAc,EAAE;AACdwE,cAAM,EAAE,yCADM;AAEdC,kBAAU,EAAE,mCAFE;AAGdC,mBAAW,EAAE,0CAHC;AAIdC,iBAAS,EAAE,mBAJG;AAKdC,qBAAa,EAAE,+BALD;AAMdC,yBAAiB,EAAE,cANL;AAOdC,aAAK,EAAE;AAPO;AAFS,KAApB;AAaP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACxBA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYP,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBQ,eAAzB,CAAyC,yDAAzC,WACS,UAAAX,GAAG;AAAA,aAAIpB,OAAO,CAACF,KAAR,CAAcsB,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {NgModule} from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { MatCardModule} from '@angular/material/card';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list'\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport { from } from 'rxjs';\n\n/**\n * Barrel module for Angular Material modules used by the app\n */\n@NgModule({\n  imports: [\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatListModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDialogModule,\n    MatSnackBarModule\n  ],\n  exports: [\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatListModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDialogModule,\n    MatSnackBarModule\n\n\n  ]\n})\nexport class NgMaterialModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'quick-notes';\n}\n","<!--<div>-->\n  <app-notes></app-notes>\n<!--</div>-->","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport {RouterModule, Routes} from '@angular/router';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NoteListComponent } from './components/note-list/note-list.component';\nimport { NotesComponent } from './components/notes/notes.component';\nimport { NoteListItemComponent } from './components/note-list-item/note-list-item.component';\nimport { NoteEdtDialogComponent } from './components/note-edt-dialog/note-edt-dialog.component';\nimport { HeaderComponent } from './components/header/header.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NoteService } from './services/note.service';\nimport { NgMaterialModule } from './NgMaterialModule';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AngularFireModule } from '@angular/fire';\nimport { AngularFirestoreModule } from '@angular/fire/firestore';\nimport { environment } from 'src/environments/environment';\nimport { MatSelectModule } from '@angular/material/select';\nimport { NoteSortDialogComponent } from './components/note-sort-dialog/note-sort-dialog.component';\nimport { LoginComponent } from './components/login/login.component';\n//import { HttpClientModule } from '@angular/common/http';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NoteListComponent,\n    NoteListComponent,\n    NotesComponent,\n    NoteListItemComponent,\n    NoteEdtDialogComponent,\n    HeaderComponent,\n    NoteSortDialogComponent,\n    LoginComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    //HttpClientModule,\n    NgMaterialModule,\n    ReactiveFormsModule,\n    /*RouterModule.forRoot([\n      {path:'', redirectTo:'',pathMatch:'full'}\n    ]),*/\n\n    BrowserAnimationsModule,\n    AngularFireModule.initializeApp(environment.firebaseConfig, 'quick-notes'),\n    AngularFirestoreModule,     // Only required for database features\n    MatSelectModule,\n  ],\n  providers: [\n    NoteService\n  ],\n  bootstrap: [AppComponent],\n  entryComponents: [NoteEdtDialogComponent]\n})\nexport class AppModule { }\n","import {Component, EventEmitter, Output} from '@angular/core';\n\n/**\n * Header for the app. Contains Add button, emits event to Notes component when clicked.\n */\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css'],\n})\nexport class HeaderComponent {\n\n  @Output() onAddClick = new EventEmitter<void>();\n  @Output() onSortClick = new EventEmitter<void>();\n\n}\n","<mat-toolbar>\n  <span>My Notes</span>\n  <span class=\"toolbar-spacer\"></span>\n  <mat-icon (click)=\"onSortClick.emit()\">sort</mat-icon>\n  <mat-icon (click)=\"onAddClick.emit()\">add</mat-icon>\n</mat-toolbar>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport {Note} from '../../interfaces/note';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  noteForm = new FormGroup({\n    secret: new FormControl('', [\n      Validators.required,\n      Validators.maxLength(100),\n    ]),\n  });  \n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1 mat-dialog-title> Note login</h1>\n<form [formGroup]=\"noteForm\">\n    <div mat-dialog-content>\n\n        <mat-form-field>\n            <textarea matInput placeholder=\"Enter Secret Key\" id=\"secret\" name=\"secret\"\n                      matTextareaAutosize matAutosizeMinRows=1 matAutosizeMaxRows=1\n                      formControlName=\"secret\" cdkFocusInitial>\n            </textarea>\n          </mat-form-field>\n          <mat-error *ngIf=\"noteForm.controls['secret'].hasError('required')\">\n            Secret Key is required.\n          </mat-error>\n          <mat-error *ngIf=\"noteForm.controls['secret'].hasError('maxlength')\">\n            Secret Key must be less than 100 characters.\n          </mat-error>\n\n    </div>\n    <mat-dialog-actions align=\"end\">\n        <button mat-button [mat-dialog-close]=\"noteForm.value\" [disabled]=\"noteForm.invalid\">Save</button>\n    </mat-dialog-actions>\n</form>","import {Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport {Note} from '../../interfaces/note';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\ninterface NoteFormat {\n  value: string;\n  viewValue: string;\n}\n/**\n * Modal dialog shown for adding/editing (not implemented) notes.\n * Uses Angular Material's MatDialog, and Angular Reactive forms for client-side validation.\n */\n@Component({\n  selector: 'app-note-edt-dialog',\n  templateUrl: './note-edt-dialog.component.html',\n  styleUrls: ['./note-edt-dialog.component.css'],\n})\nexport class NoteEdtDialogComponent {\n\n  noteForm = new FormGroup({\n    title: new FormControl('', [\n      Validators.required,\n      Validators.maxLength(255),\n    ]),\n    content: new FormControl('', [\n      Validators.required,\n      Validators.maxLength(1024),\n    ]),\n    category: new FormControl('', [\n      Validators.required,\n    ])\n  });  \n\n  notes: NoteFormat[] = [\n    {value: 'Personal', viewValue: 'Personal'},\n    {value: 'Business', viewValue: 'Business'},\n    {value: 'Interests', viewValue: 'Interests'},\n    {value: 'Todo', viewValue: 'To do'},\n    {value: 'Shopping', viewValue: 'Shopping'},\n    {value: 'Others', viewValue: 'Others'}\n  ];\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Note) {\n  }\n\n\n}\n","<h1 mat-dialog-title>New Note</h1>\n<form [formGroup]=\"noteForm\">\n  <div mat-dialog-content>\n    <mat-form-field>\n      <textarea matInput placeholder=\"Title\" id=\"title\" name=\"title\"\n                matTextareaAutosize matAutosizeMinRows=1 matAutosizeMaxRows=6\n                formControlName=\"title\" cdkFocusInitial>\n\n      </textarea>\n    </mat-form-field>\n    <mat-error *ngIf=\"noteForm.controls['title'].hasError('required')\">\n      A title is required.\n    </mat-error>\n    <mat-error *ngIf=\"noteForm.controls['title'].hasError('maxlength')\">\n      The title must be less than 255 characters.\n    </mat-error>\n\n\n    <mat-form-field>\n    <textarea matInput placeholder=\"Content\" id=\"content\" name=\"content\"\n              matTextareaAutosize matAutosizeMinRows=5 matAutosizeMaxRows=10\n              formControlName=\"content\">\n    </textarea>\n\n      <mat-error *ngIf=\"noteForm.controls['content'].hasError('required')\">\n        The note's content is required.\n      </mat-error>\n      <mat-error *ngIf=\"noteForm.controls['content'].hasError('maxlength')\">\n        The note's content must be less than 1024 characters.\n      </mat-error>\n\n\n    </mat-form-field>\n\n    <mat-form-field>\n\n      <mat-label>Notes Category</mat-label>\n      <mat-select matInput placeholder=\"Category\" id=\"category\" name=\"category\" formControlName=\"category\">\n        <mat-option *ngFor=\"let note of notes\" [value]=\"note.value\">\n          {{note.viewValue}}\n        </mat-option>\n      </mat-select>\n  \n       <mat-error *ngIf=\"noteForm.controls['category'].hasError('required')\">\n          The note's category is required.\n        </mat-error>  \n  \n      </mat-form-field>\n\n  </div>\n  <mat-dialog-actions align=\"end\">\n    <button mat-button [mat-dialog-close]=\"noteForm.value\"\n            [disabled]=\"noteForm.invalid\">Save</button>\n  </mat-dialog-actions>\n</form>\n","import {Component, Input} from '@angular/core';\nimport {Note} from '../../interfaces/note';\n\n/**\n * Presentational component representing a single note in the list.\n */\n@Component({\n  selector: 'app-note-list-item',\n  templateUrl: './note-list-item.component.html',\n  styleUrls: ['./note-list-item.component.css']\n})\nexport class NoteListItemComponent {\n\n  @Input() note: Note;\n\n  public setBg(): string {\n    if(this.note.category == 'Personal')\n      return '#f3eadb';\n    if(this.note.category == 'Business')\n      return '#feff9c';\n    if(this.note.category == 'Shopping')\n      return '#daf8e3';\n    if(this.note.category == 'Interests')\n    return '#c9df8a';\n    if(this.note.category == 'Todo')\n    return '#dbc9ef';\n    if(this.note.category == 'Others')\n    return '#ffd7b5';\n  }\n}\n","<mat-card [style.background-color]=\"setBg()\">\n    <mat-card-title>{{note.title}} <a href=\"https://web.whatsapp.com/send?text=*{{note.title}}* : {{note.content}}\" \n      data-action=\"#\" target=\"_blank\" ><span class=\"material-icons float-right\">share</span></a></mat-card-title>\n    <mat-card-content>{{note.content}}</mat-card-content>\n    <div class=\"mat-card-category\">#{{note.category}}</div>\n</mat-card>","import {Component, Input} from '@angular/core';\nimport {Note} from '../../interfaces/note';\n\n/**\n * List of notes displayed by the app.\n * Responsible for showing note list items, or a message if there are none to display.\n */\n@Component({\n  selector: 'app-note-list',\n  templateUrl: './note-list.component.html',\n  styleUrls: ['./note-list.component.css'],\n})\nexport class NoteListComponent {\n\n  @Input() notes: Note[];\n\n  /**\n   * helper\n   * @returns {boolean} true if the note list should be shown, false otherwise\n   * @private\n   */\n  public _isNoteListEmpty(): boolean {\n    return !this.notes || !this.notes.length;\n  }\n}\n","<mat-list>\n  <p *ngIf=\"_isNoteListEmpty()\">There are no notes.</p>\n  <app-note-list-item *ngFor=\"let note of notes\" [note]=\"note\"></app-note-list-item>\n</mat-list>\n\n\n","import { Component, OnInit, Inject } from '@angular/core';\nimport {MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport {Note} from '../../interfaces/note';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\ninterface NoteFormat {\n  value: string;\n  viewValue: string;\n}\n\n@Component({\n  selector: 'app-note-sort-dialog',\n  templateUrl: './note-sort-dialog.component.html',\n  styleUrls: ['./note-sort-dialog.component.css']\n})\nexport class NoteSortDialogComponent implements OnInit {\n\n  noteForm = new FormGroup({\n    category: new FormControl('', [])\n  });  \n\n  notes: NoteFormat[] = [\n    {value: 'Personal', viewValue: 'Personal'},\n    {value: 'Business', viewValue: 'Business'},\n    {value: 'Interests', viewValue: 'Interests'},\n    {value: 'Todo', viewValue: 'To do'},\n    {value: 'Shopping', viewValue: 'Shopping'},\n    {value: 'Others', viewValue: 'Others'},\n    {value: 'All', viewValue: 'All'}\n  ];\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: Note) {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1 mat-dialog-title>Sort Note</h1>\n<form [formGroup]=\"noteForm\">\n    <div mat-dialog-content>\n        <mat-form-field>\n\n            <mat-label>Sort by Category</mat-label>\n            <mat-select matInput placeholder=\"Category\" id=\"category\" name=\"category\" formControlName=\"category\">\n                <mat-option *ngFor=\"let note of notes\" [value]=\"note.value\">\n                    {{note.viewValue}}\n                </mat-option>\n            </mat-select>\n\n        </mat-form-field>\n\n    </div>\n    <mat-dialog-actions align=\"end\">\n        <button mat-button [mat-dialog-close]=\"noteForm.value\" >Save</button>\n    </mat-dialog-actions>\n</form>","import {Component, OnInit} from '@angular/core';\nimport {Note} from '../../interfaces/note';\nimport {NoteService} from '../../services/note.service';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport {NoteEdtDialogComponent} from '../note-edt-dialog/note-edt-dialog.component';\nimport {NoteSortDialogComponent} from '../note-sort-dialog/note-sort-dialog.component'\nimport { NotExpr } from '@angular/compiler';\nimport { LoginComponent } from '../login/login.component';\n\n/**\n * Top-level stateful component which handles notes, retrieves them from the API using a service,\n * and shows/hides dialog for adding notes. Acts in response to events from children.\n */\n@Component({\n  selector: 'app-notes',\n  templateUrl: './notes.component.html',\n  styleUrls: ['./notes.component.css']\n})\nexport class NotesComponent implements OnInit {\n\n  public _notes: Note[];\n  public _allNotes: Note[]=[];\n  private readonly SNACKBAR_DELAY: number = 1000;\n\n  private secretKey = 'secretKeyTosecureNotes';\n\n  constructor(\n    private _noteService: NoteService,\n    private _dialog: MatDialog,\n    private _snackBar: MatSnackBar\n  ) {\n  }\n\n  ngOnInit(): void {\n    if(localStorage.getItem('receivedSK') == this.secretKey)\n      this._getAllNotes();\n    else\n      this.verifyUser()   \n  }\n\n  private verifyUser() {\n    const dialogRef = this._dialog.open(LoginComponent, {\n      height: '200px',\n      width: '400px',\n      data: {note: {}}\n    });\n  \n    dialogRef.afterClosed()\n      .subscribe((result) => {\n        if(!result){\n          this.verifyUser()\n        }\n        else if (result.secret == this.secretKey) {\n          this._getAllNotes();\n          localStorage.setItem('receivedSK', 'secretKeyTosecureNotes');\n        }\n        else{\n          this.verifyUser()\n        }\n      })\n  }\n  /**\n   * Delegates to the NoteService to retrieve the list of notes from the server.\n   * @private\n   */\n  private _getAllNotes(): void {\n    this._noteService.getAllNotes()\n      .subscribe((notes) => {\n          this._notes = notes;\n        },\n        (error) => {\n          this._snackBar.open('There was a problem retrieving notes from the server', 'Ok', {duration: this.SNACKBAR_DELAY});\n          console.log('Error retrieving notes', error);\n        });\n  }\n\n  /**\n   * Called when onAddClick event emmitted by the header. Shows the add note dialog.\n   * @private\n   */\n  public _onAddClick(): void {\n    const dialogRef = this._dialog.open(NoteEdtDialogComponent, {\n      height: '500px',\n      width: '700px',\n      data: {note: {}}\n    });\n\n    dialogRef.afterClosed()\n      .subscribe((result) => {\n        if (!result) {\n          return;\n        }\n        const note: Note = {\n          title: result.title,\n          content: result.content,\n          category: result.category,\n          createdOn: Date.now()\n        };\n        this._noteService.addNote(note)\n          .subscribe((added: Note) => {\n            console.log('added note', {added});\n            this._snackBar.open('Note added.', 'Ok', {duration: this.SNACKBAR_DELAY});\n            this._getAllNotes();\n          }, (error: any) => {\n            console.log('error adding note', {error});\n            this._snackBar.open('There was a problem adding the note.');\n          });\n      });\n  }\n\n  public _onSortClick(): void {\n    const dialogRef = this._dialog.open(NoteSortDialogComponent, {\n      height: '200px',\n      width: '300px',\n      data: {note: {}}\n    });\n\n    dialogRef.afterClosed()\n      .subscribe((result) => {\n        if (!result) {\n          return;\n        }\n        if(result.category == 'All')\n          this._getAllNotes();\n        else {\n          if (this._allNotes.length == 0)\n            this._allNotes = this._notes;\n          this._notes = [];\n          for (let note of this._allNotes) {\n            if (note.category == result.category)\n              this._notes.push(note)\n          }\n        }\n      });\n  }\n \n}\n","<app-header (onAddClick)=\"_onAddClick()\" (onSortClick)=\"_onSortClick()\"></app-header>\n\n<div class=\"container\">\n  <app-note-list [notes]=\"_notes\"></app-note-list>\n</div>\n","import {Injectable} from '@angular/core';\nimport {Observable, defer} from 'rxjs';\nimport {Note} from '../interfaces/note';\n//import {HttpClient} from '@angular/common/http';\nimport { AngularFireDatabase, AngularFireList } from '@angular/fire/database';\nimport { AngularFirestore } from \"@angular/fire/firestore\";\n//import { FirebaseListObservable, FirebaseObjectObservable, AngularFireDatabase } from 'angularfire2/database';\n\nimport { tap,catchError, map } from 'rxjs/operators';\nimport { from } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NoteService {\n\n  notesRef: AngularFireList<any>;      // Reference to notes list, Its an Observable\n  //readonly API_URL = environment.apiUrlRoot + '/notes';\n\n  constructor(/*private _http: HttpClient*/ private db: AngularFireDatabase, protected firestore: AngularFirestore) {\n  }\n\n\n  public getAllNotes(): Observable<Note[]> {\n    return this.firestore.collection<Note>('notes').valueChanges()\n    /*this.notesRef = this.db.list('notes');\n    return this.notesRef as Observable<Note[]>;\n    //return this._http.get(this.API_URL) as Observable<Note[]>;*/\n  }\n  //const id = this.firestore.createId();\n  //const doc = this.firestore.collection('notes').doc(id).get();\n\n  public addNote(note: Note){\n    const id = this.firestore.createId();\n    //this.firestore.collection<Note>('notes').doc(id).set(note, {merge: true})\n    //.pipe(map(response => JSON.stringify(response)));\n\n    const promToOb = new Promise<Note>((resolve, reject) =>{\n      this.firestore\n          .collection(\"notes\")\n          .add(note)\n          .then(res => {}, err => reject(err));\n  });\n\n  return from(promToOb);\n\n    //return defer(() => this.firestore.collection<Note>('notes').doc(id).set(note, {merge: true}));\n    //return this.firestore.collection<Note>(\"notes\").add(note);\n    /*.then(res => {}, err => reject(err));\n    return this.firestore.collection<Note>('notes').add(note)\n    //const id = this.firestore.createId();\n    //return this.firestore.collection.set(Object.assign({}, { id }, note)).then()\n    //return this._http.post(this.API_URL, note) as Observable<Note>;\n    return new Promise<Note[]>((resolve, reject) =>{\n      this.firestore\n          .collection(\"notes\")\n          .add(note)\n          .then(res => {}, err => reject(err));\n  });*/\n  }\n\n  /*public AddUser(note: Note) {\n    this.notesRef.push({\n      id: note.id,\n      title: note.title,\n      content: note.content,\n      category: note.category\n    })*/\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  firebaseConfig: {\n    apiKey: \"AIzaSyDvcy1pHAWxIRrwZvDOhWaEGYF8nzXncfU\",\n    authDomain: \"quick-notes-c34ea.firebaseapp.com\",\n    databaseURL: \"https://quick-notes-c34ea.firebaseio.com\",\n    projectId: \"quick-notes-c34ea\",\n    storageBucket: \"quick-notes-c34ea.appspot.com\",\n    messagingSenderId: \"190423106850\",\n    appId: \"1:190423106850:web:51d28294bebd6278f3117b\"\n  }\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}